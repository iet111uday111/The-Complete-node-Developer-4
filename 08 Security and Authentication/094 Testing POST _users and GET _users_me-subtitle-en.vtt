WEBVTT

00:00.210 --> 00:05.640
Now that we have our user data in the test database we can actually write those test cases for the two

00:05.640 --> 00:07.320
routes we've created.

00:07.350 --> 00:09.950
This is going to happen in the bottom of the server test file.

00:09.990 --> 00:13.180
We'll be doing some of them together and some of them will be challenges.

00:13.200 --> 00:19.340
First up let's test the route that returns the individual authenticated user will make a new described

00:19.350 --> 00:23.370
block for a get users.

00:23.480 --> 00:29.960
Me and right in here we're going to add two test cases one and when we have a valid authentication token

00:30.140 --> 00:35.180
and one when we do not provide an authentication token so we can make sure the private route is indeed

00:35.210 --> 00:36.080
private.

00:36.170 --> 00:45.210
First up it should return a user if authenticated.

00:45.290 --> 00:48.710
This one is going to be an asynchronous test like all of the previous ones.

00:48.730 --> 00:52.900
So I will be adding the Dunn argument inside of our callback function.

00:52.900 --> 00:59.650
And the second test case it should return a 4.

00:59.660 --> 01:07.010
0 1 if not authenticated and this task is going to make sure that when no token is provided Random User

01:07.010 --> 01:12.530
Data is not sent back to someone who shouldn't have access to it we're going to do the first test case

01:12.530 --> 01:16.670
together and you'll be responsible for setting up the second one up here.

01:16.670 --> 01:21.360
The first thing we're going to do is make the request to the application using super test.

01:21.380 --> 01:27.200
This is going to be a GET request and the request doesn't require any special you Arel parameters it

01:27.210 --> 01:31.100
simply forward slash users forward slash meat.

01:31.400 --> 01:37.200
Next up we're going to set a header and this is something we haven't done before to set in super test.

01:37.220 --> 01:44.000
We use the set method set takes two arguments and he had her name as the first one and he had her value

01:44.000 --> 01:49.340
is the second one in our case the header name is going to be X off and the header value is going to

01:49.340 --> 01:55.620
be this value right here at the token value inside of the first user.

01:55.740 --> 01:57.570
We're going to go into the users array.

01:57.690 --> 02:03.330
We're going to grab the first item we're going to go into it's tokens array they grab the first item

02:03.450 --> 02:06.900
and access the dot token property.

02:07.020 --> 02:12.150
Now that we have our headers set we can start making some assertions about what should happen we should

02:12.150 --> 02:15.050
get back 200 as the age TTP status code.

02:15.390 --> 02:21.720
We can expect a 200 to come back and we can also go ahead and expect some things about the body that

02:21.720 --> 02:22.770
comes back.

02:22.860 --> 02:29.160
I'm going to expect and I get to pass in a custom expect function and then here we're going to make

02:29.160 --> 02:30.330
a few assertions.

02:30.330 --> 02:34.440
First up let's assert the ID equals the appropriate ID.

02:34.530 --> 02:44.040
I'm going to expect that the response a body id property equals using to be the ID we have here for

02:44.040 --> 02:45.930
the first user.

02:45.930 --> 02:52.770
That means inside of to be I'm going to pass in user's printer grab the first one we're going to grab

02:52.770 --> 02:58.630
the id property and we're going to call two hacks string.

02:58.740 --> 02:59.610
Excellent.

02:59.610 --> 03:04.650
Now this should be the case when we're fetching a user ID that comes back in the body should be the

03:04.650 --> 03:07.770
idea of the user whose token we supplied.

03:07.770 --> 03:11.420
Next up we can go ahead and assert that the e-mails match.

03:11.420 --> 03:18.810
I'm going to expect that the response body e-mail property equals using it to be the following.

03:18.900 --> 03:24.060
We're going to go into that user's array and grab the first item then we just need to access the e-mail

03:24.090 --> 03:25.430
property like this.

03:25.470 --> 03:26.220
And there we go.

03:26.280 --> 03:31.200
We have two assertions that make sure when we provide a valid token we get valid data back.

03:31.260 --> 03:38.670
Now that we have this in place we can go ahead and tack on a call to end passing in done just like we've

03:38.670 --> 03:40.880
done in the past with this in place.

03:40.890 --> 03:43.130
Our test case is now ready to go.

03:44.230 --> 03:48.520
We can run it from the terminal using NPM test when I run it.

03:48.540 --> 03:52.850
We should now see we have 12 test cases and all 12 are passing.

03:53.160 --> 03:55.590
It's going through the to do test cases right now.

03:55.590 --> 03:59.790
Now we're going through the user's me and we do indeed get the appropriate data.

03:59.790 --> 04:04.800
Now the second task that we haven't filled out that one fails because we never call the done function.

04:04.800 --> 04:05.980
That's perfectly fine.

04:06.000 --> 04:09.420
For now this means everything is working as expected.

04:09.420 --> 04:14.580
If the email that comes back is something else I'm going to concatenate the number one and we rerun

04:14.580 --> 04:15.460
the test suite.

04:15.540 --> 04:20.160
We are going to see that test failing because the e-mail that came back on the body which we modified

04:20.160 --> 04:25.620
just to prove a point doesn't equal the e-mail that we added as the seed data right here.

04:25.620 --> 04:29.070
You can see the test case does indeed fail.

04:29.100 --> 04:33.960
I'm going to go ahead and revert that change so it passes again and we can move on to the second function

04:33.960 --> 04:36.090
and this is going to be your first challenge.

04:36.120 --> 04:39.160
Your challenge here is to make a call to the users.

04:39.180 --> 04:44.310
Me Around the same and get request you're not going to provide an X auth token and all you're gonna

04:44.310 --> 04:46.390
do is expect that you get a 401.

04:46.410 --> 04:47.110
Back.

04:47.250 --> 04:52.590
You're also going to expect that the body is equal to an empty object which it should be if the user

04:52.590 --> 04:54.450
is not authenticated.

04:54.450 --> 04:58.920
Once you have both of those assertions in place make sure to call and passing and done.

04:59.010 --> 05:00.790
This is going to wrap up the test case.

05:00.810 --> 05:06.240
And remember also when you're comparing an empty object which is going to be the response body to another

05:06.240 --> 05:12.280
object you have to use to equal not to be take a moment to knock this out.

05:12.300 --> 05:18.450
Go ahead and run the test suite make sure both tests under get users me are passing when they are go

05:18.450 --> 05:22.300
ahead and click play.

05:22.300 --> 05:22.790
All right.

05:22.900 --> 05:26.940
Hopefully you were able to add that test case and see it pass over in the terminal.

05:26.950 --> 05:28.630
First up we got to make the request.

05:28.630 --> 05:29.530
Nothing new here.

05:30.530 --> 05:37.100
Request to the app and we're going to make the exact same request a get request to forward Sodje users

05:37.160 --> 05:38.310
forward slash to me.

05:38.440 --> 05:42.620
And this time around that we will not be calling said we want to see what happens when we don't provide

05:42.620 --> 05:44.930
the token we can make our assertions.

05:44.930 --> 05:46.570
We're expecting a 401.

05:46.580 --> 05:51.680
Which is the status code we send back from in the authenticates middleware and then we can go ahead

05:51.680 --> 05:57.740
and make a custom assertion about the body we can pass in the response argument to our custom callback

05:57.740 --> 06:03.020
function and we can expect that the response body is an empty object which it should be.

06:03.020 --> 06:05.400
We should not have any user properties on it.

06:05.930 --> 06:15.540
I'm going to expect response dot body to equal that object just like this.

06:15.710 --> 06:21.460
Now we can tack on end passing end done in our test case is complete if we don't get a 401.

06:21.560 --> 06:25.930
The test is going to fail if the body includes anything except for an empty object.

06:25.940 --> 06:27.850
The test is going to fail as well.

06:28.040 --> 06:30.890
Over inside of the terminal I'm going to rerun the test suite.

06:30.950 --> 06:36.940
We should now have 13 tests and all of them should be passing and through the to do tests right now.

06:37.040 --> 06:39.660
And we should be getting on to the users tests and there we go.

06:39.680 --> 06:42.490
Both tests are passing which is fantastic.

06:42.560 --> 06:47.390
Now that we have some test cases for the get users mirror outlets go ahead and add some test cases for

06:47.390 --> 06:48.810
the Sign-Up route.

06:48.830 --> 06:49.860
We're going to add three.

06:49.940 --> 06:56.660
But first up we have to add our describe block and the route for this is a post to request to forward

06:56.660 --> 07:03.310
slash users that I can provide my function and inside of here we can add three test cases.

07:03.320 --> 07:09.980
Let's go ahead and call it three times first then we'll worry about the actual test cases it should

07:10.370 --> 07:12.160
create a user.

07:12.200 --> 07:17.540
This call is going to test what happens when we pass in a valid data a valid e-mail that's not already

07:17.540 --> 07:17.960
in use.

07:17.960 --> 07:21.610
Any valid password we should have the user created.

07:21.620 --> 07:31.220
Next up we can test what happens when the fields are invalid it should return validation errors if request

07:31.700 --> 07:32.880
invalid.

07:32.990 --> 07:37.250
And this one is going to make sure that when we provide either an invalid e-mail or a password that's

07:37.250 --> 07:40.600
not at least six characters the user doesn't get created.

07:40.790 --> 07:41.480
The last test.

07:41.480 --> 07:44.060
We're going to write for the sign up method.

07:44.060 --> 07:51.840
It should not create user if e-mail in use.

07:52.020 --> 07:55.670
If the email is already in use we do not want to create the user.

07:55.680 --> 07:59.720
So we're going to write a test case that verifies We do indeed get the error.

07:59.730 --> 08:00.660
Excellent.

08:00.660 --> 08:04.790
Now that we have all the test cases set up let's go ahead and fill out the first one.

08:05.010 --> 08:09.840
This first test case is going to require that we have a unique valid e-mail and a password.

08:09.840 --> 08:14.360
I'm going to make those two variables up above e-mail which all set equal to.

08:14.370 --> 08:24.650
Example at example dot com and password which all set equal to a valid password such as 1 to 3 AM and

08:24.740 --> 08:25.300
B.

08:25.340 --> 08:26.810
Exclamation mark.

08:26.810 --> 08:33.020
Next up we can actually send off the request using a request passing in our app and this one is going

08:33.020 --> 08:34.210
to be a post request.

08:34.220 --> 08:38.810
So I'll call the post method now that you are off this one is not going to be dynamic so we can use

08:38.810 --> 08:41.200
a regular string as opposed to a template string.

08:41.300 --> 08:44.110
And we're going to forward slash users.

08:44.120 --> 08:48.530
This is the route for creating a new user and we are going to need to send some data along with this

08:48.530 --> 08:52.620
request and this is the one that makes sure everything works when we send valid data.

08:52.640 --> 08:57.770
So I will be calling send passing in both the email and password on our object.

08:57.980 --> 09:04.160
Email is going to get the value from the e-mail variable above and we'll do the same thing for password.

09:04.340 --> 09:08.710
Now that we have the request sent off we can start making some assertions about what should happen.

09:08.720 --> 09:15.320
First up we are expecting a 200 it to be the status code that comes back that we can go ahead and expect

09:15.320 --> 09:20.010
that we get our X auth token back using a custom expect call.

09:20.300 --> 09:25.920
We're expecting that the following function doesn't throw any errors.

09:25.920 --> 09:32.120
I'm going to expect that the response headers object has a header called X off.

09:32.310 --> 09:36.000
And in order to get the value we're going to need to use the bracket notation as opposed to the dot

09:36.000 --> 09:41.750
notation because our header name and does have a hyphen in it which would be invalid using dot notation.

09:41.910 --> 09:45.690
Right here though inside of the single quotes we can provide the name x.

09:45.960 --> 09:49.440
We're expecting this value to exist.

09:49.440 --> 09:54.900
We don't really care what it is we just want to make sure it does exist when the user is created.

09:54.900 --> 09:59.440
Next up we can go ahead and verify that there is an e-mail and there is an ID.

09:59.760 --> 10:04.000
I'm going to expect that their response a body has an ID.

10:04.260 --> 10:10.970
We expect the I.D. to exist and we can do the exact same thing for the e-mail.

10:10.980 --> 10:17.630
We're expecting the response abody e-mail property to be the value up above.

10:17.760 --> 10:22.980
Instead of using to exist we can specify the actual value since we know it now that we have this in

10:22.980 --> 10:28.150
place we can go ahead and call and passing in done.

10:28.270 --> 10:33.050
I can save the file and we can run our test case and make sure everything works as expected.

10:33.280 --> 10:35.560
I'm going to rerun the entire test suite.

10:35.560 --> 10:37.720
We should now have 14 passing tests

10:40.350 --> 10:46.380
going through the to do's tests now we're in the users tests and we do indeed have a passing test should

10:46.380 --> 10:48.170
create a user passes.

10:48.190 --> 10:50.490
Now the other tests are failing but that's expected.

10:50.490 --> 10:53.100
We haven't filled those ones out.

10:53.160 --> 10:56.240
Now if you want we can take this test case even a little further.

10:56.460 --> 11:01.350
Instead of passing and done and we could pass in one of our custom functions this is going to let us

11:01.350 --> 11:06.960
query the database making sure everything looks good there like we've done in other custom and functions.

11:06.960 --> 11:11.680
We're going to check if there's an error if there is an error we're simply going to call.

11:11.690 --> 11:12.460
Done.

11:12.500 --> 11:14.080
Return done.

11:14.140 --> 11:15.090
Passing in the error.

11:15.100 --> 11:18.460
So the test fails if there is no errors in the assertions.

11:18.460 --> 11:21.390
Up above we can go ahead and query for a user.

11:21.670 --> 11:29.260
I'm going to use user dot find one to find a user where the email equals the email we have above.

11:29.260 --> 11:34.780
This should indeed return a valid user since we just created it and got a 200 back then I can add on

11:34.840 --> 11:41.560
then we're going to get the user and we can make some assertions about the document saved in the database.

11:41.560 --> 11:49.400
For example we could expect it exists I'm going to expect that the user exists using to exist.

11:49.400 --> 11:54.230
We could even expect that the password does not equal the password we used since it should have been

11:54.230 --> 11:55.630
hashed.

11:55.640 --> 12:01.460
We can expect that the user password property does not equal using.

12:01.480 --> 12:06.570
To not be the password variable defined above.

12:06.610 --> 12:11.110
If the user password is equal to the password above we have a pretty big problem because that means

12:11.110 --> 12:15.110
our passwords are not getting hashed right after my two expect calls.

12:15.130 --> 12:18.280
I can call done wrapping up this test case.

12:18.280 --> 12:23.500
Now that we have this in place I can rerun the test suite and that test should still be passing this

12:23.500 --> 12:28.240
time around though it is fetching the actual user from the database and it's making some assertions

12:28.300 --> 12:33.340
about the document right here moving through all the tests and the first test is failing.

12:33.340 --> 12:35.510
Should create a user is not passing.

12:35.530 --> 12:38.130
Let's go ahead and see what the error is and try to fix it.

12:38.140 --> 12:39.330
User is not defined.

12:39.370 --> 12:40.280
That's an easy one.

12:40.480 --> 12:45.070
When you get errors like this it usually means you forgot to do something basic like importing the correct

12:45.070 --> 12:48.350
library up above all I need to do to fix that error.

12:48.550 --> 12:55.150
This create a constant call user and require the user model forward slash.

12:55.200 --> 13:01.330
We're going to go back a directory into the models directory and we're going to grab the user file.

13:01.620 --> 13:05.280
Now that we have this in place I should be able to save the server test file.

13:05.280 --> 13:10.130
Rerun the test suite and our test case right here should be passing.

13:10.140 --> 13:14.460
I'm going to rerun it to make sure the error was fixed and if it was we can move on to the to final

13:14.460 --> 13:16.620
test cases for this one.

13:16.800 --> 13:22.290
We're going through the to do tests now we're out the user's tests and the first test passes which is

13:22.290 --> 13:24.250
fantastic.

13:24.280 --> 13:29.650
All that's left to do is fill out those final two test cases and this is going to be your second challenge

13:29.920 --> 13:30.660
for this one.

13:30.670 --> 13:35.860
All you need to do is send across an invalid email and an invalid password.

13:35.860 --> 13:42.420
You expect 400 to come back if it does then everything is working as expected for the second one you're

13:42.430 --> 13:44.930
going to go ahead and use an email that's already taken.

13:45.040 --> 13:49.720
Which means that you're going to try to sign up using one of the emails that we use in our seed data.

13:49.840 --> 13:55.390
Either Andrew an example dot com Gen at example dot com or if you happen to name something else go ahead

13:55.390 --> 13:57.100
and use that instead.

13:57.130 --> 14:02.830
This request the second one should also fail when you have an email that's already in use and a valid

14:02.830 --> 14:06.160
password you're going to expect a 400 to come back.

14:06.160 --> 14:09.150
For that take a moment to knock both of those out.

14:09.190 --> 14:11.770
Make sure you get 400 for both.

14:11.950 --> 14:15.290
When you're done run the test suite make sure all the tests are passing.

14:15.310 --> 14:20.460
Then go ahead and click play.

14:20.520 --> 14:25.320
Hopefully you were able to get these two tests complete and passing over inside of the terminal.

14:25.380 --> 14:30.450
The first test were going to run is going to be the one that has an invalid email and an invalid password.

14:30.450 --> 14:33.840
I'm going to request something from the application.

14:33.840 --> 14:38.670
We're going to go ahead and make a post request to the exact same u r l we used above forward slash

14:38.910 --> 14:44.310
users in lower case then we're going to go ahead and send across some data.

14:44.310 --> 14:49.830
I'll provide my object which is going to be the data we send and it will send an email equal to an invalid

14:49.830 --> 14:54.520
email like and and will send a password which is also invalid.

14:54.540 --> 14:56.550
Like one two three.

14:56.550 --> 15:01.260
Both of these are invalid so we can start making some assertions about what we're going to get back.

15:01.260 --> 15:08.250
We're going to expect that we get a 400 back and then we can go ahead and call end passing done this

15:08.250 --> 15:10.010
test case should now pass.

15:10.050 --> 15:16.020
If everything goes as expected I'm going to save the server test file and restart the test suite over

15:16.030 --> 15:17.010
inside of the terminal.

15:17.070 --> 15:21.990
This time around we only have that one test case failing the one we just filled out should indeed be

15:21.990 --> 15:24.180
passing where moving through that to do tasks.

15:24.180 --> 15:28.120
Now we're in the users tests and it's passing which is great.

15:28.230 --> 15:29.990
We can now move on to the final test.

15:30.000 --> 15:34.950
This test makes sure that when we try to sign up a user but that emails are already in use we get a

15:34.950 --> 15:36.300
400 back.

15:36.600 --> 15:40.350
I'm going to kick things off by calling request to initialize the request.

15:40.350 --> 15:45.680
We will be making a post request it to the exact same you are l forward slash users.

15:45.780 --> 15:51.870
And now we can go ahead and set up our data in site of Send Now the data for this test case is supposed

15:51.870 --> 15:52.730
to be valid.

15:52.800 --> 15:58.080
It's just supposed to be already in use which means for the email we want to use one of the emails in

15:58.080 --> 15:59.530
our users array.

15:59.580 --> 16:03.120
I'm going to go ahead and access the first item in the user's array.

16:03.480 --> 16:08.370
I'm going to grab the email and I'm going to use that right here and this email is obviously already

16:08.370 --> 16:13.670
in the database since it's part of our seed data so we should get a 400 back for the password.

16:13.830 --> 16:20.870
I'm going to set it equal to a valid password like password one two three exclamation mark.

16:20.880 --> 16:24.920
Next up we can make our assertion expecting that a 400 comes back.

16:25.050 --> 16:31.770
I'm going to expect that we get a 400 and then I can call and passing in done and we can rerun the test

16:31.770 --> 16:34.630
suite for a final time this time around.

16:34.650 --> 16:38.380
We should have all 16 test cases passing if we do.

16:38.520 --> 16:44.250
We're done we can wrap up the video by making a commit right here we're moving on to the user's tasks

16:44.280 --> 16:48.490
and it looks like everything did work as expected which is fantastic.

16:48.570 --> 16:55.260
Now that we have some test cases in place for the sign up call and the get users Mikol Let's go ahead

16:55.260 --> 16:58.140
and make a commit to save the changes.

16:58.140 --> 17:02.820
I'm going to run get status and right here we have our new seed file as well as our modified server

17:02.820 --> 17:04.020
test file.

17:04.050 --> 17:10.500
I can usually get added to add all of those to the next commit and get commit with the M flag for a

17:10.500 --> 17:20.730
message add tests for get users me and post users.

17:20.910 --> 17:21.740
Excellent.

17:21.870 --> 17:24.000
Now that we have this in place we are done.

17:24.030 --> 17:27.330
I'm going to push things up to get help and that is it for this one.

17:27.360 --> 17:32.430
I will see you in the next video where we keep moving through the process of adding authentication to

17:32.430 --> 17:33.840
the to do API
