WEBVTT

00:00.580 --> 00:04.980
Now that you have your log out route in place it's time to go ahead and test this by adding a new describe

00:05.040 --> 00:07.720
black at the very bottom of our server test file.

00:07.720 --> 00:10.600
We're going to verify that when we send a cross a token.

00:10.600 --> 00:16.730
It does indeed get removed from the user's collection over at the bottom of server test.

00:16.810 --> 00:21.140
Yes we can out our final describe block for our final route.

00:21.790 --> 00:24.500
We're going to call the scrod passing in the route signature.

00:24.670 --> 00:31.420
It's a delete route and the you are Alice forward slash users forward slash me forward slash token exactly

00:31.450 --> 00:33.430
as we have it right here.

00:33.430 --> 00:37.570
Next up we can add our function and then here we're going to add one test case that you're going to

00:37.570 --> 00:40.410
be responsible for filling out this test case.

00:40.470 --> 00:45.940
It's going to make sure that when a real valid X or token gets passed across to the log out method it

00:45.970 --> 00:48.940
actually does get logged out.

00:48.970 --> 00:55.570
It should remove auth token on log out.

00:55.600 --> 01:00.250
This is going to be an asynchronous function so I'll specify done right here and to get this done.

01:00.250 --> 01:05.080
We're going to need some seed data and we actually already have some good data in our database for this

01:05.080 --> 01:06.670
test case right here.

01:06.670 --> 01:11.800
Our first user they already have a tokens array which means that we can just grab this token value.

01:11.830 --> 01:14.000
Use this as our X auth token.

01:14.110 --> 01:19.570
Then after the fact we can make sure that the database was updated and that the tokens array has a length

01:19.630 --> 01:20.610
of 0.

01:20.650 --> 01:28.860
To summarize the first thing you're going to do is make a delete request to the users me token.

01:29.060 --> 01:35.770
You're also going to set X off equal to token.

01:35.800 --> 01:39.520
This is going to be the token inside of the tokens array right here.

01:39.850 --> 01:41.870
Then you're going to go ahead and make some assertions.

01:42.040 --> 01:46.840
You're going to expect that you get a 200 back then you're going to add an asynchronous and call like

01:46.840 --> 01:53.200
we do here to make an asynchronous assertion here you're going to find a user in the database find user

01:53.680 --> 02:01.790
and you're going to verify that tokens are has a length of 0.

02:01.840 --> 02:05.890
Once you have all of this in place you can go ahead and run the test suite from the terminal and you

02:05.890 --> 02:08.680
should see a new test showing up and it should be passing.

02:08.680 --> 02:13.390
Feel free to use Google or anything we've done in this course including the current file to get this

02:13.390 --> 02:14.100
done.

02:14.110 --> 02:16.090
We have done everything you need to do here.

02:16.150 --> 02:18.770
Up above somewhere in the server test file.

02:18.940 --> 02:19.690
Pause the video.

02:19.690 --> 02:22.430
Knock this out and when you're done click play.

02:24.420 --> 02:25.080
How'd you do.

02:25.080 --> 02:28.650
Hopefully you were able to get that done without too much trouble to get started.

02:28.650 --> 02:33.930
We are going to be making a request to our application and this is going to be a delete request so I

02:33.930 --> 02:39.880
will call the delete method now the route for this one is going to be a regular out there is no need

02:39.880 --> 02:45.880
to inject any u r l parameters so we can use a regular string and specify it forward slash users forward

02:45.880 --> 02:48.580
slash me forward slash token.

02:48.610 --> 02:53.320
Now the next thing that we need to do is set the X auth header because remember this route is not only

02:53.320 --> 02:59.620
private but it uses that token as the token to delete right here inside of the server test file we can

02:59.620 --> 03:05.780
use set as we've done previously to set X off equal to the value we want to use.

03:05.890 --> 03:09.880
Now in our case we do want to use that user's seed token value.

03:09.880 --> 03:15.350
We're going to grab the first user then we'll grab the first token let's go into the user's array and

03:15.350 --> 03:20.870
grab the very first user then we're going to access the tokens array property grabbing the first token.

03:20.870 --> 03:25.960
And finally we're going to access the actual token value with this in place.

03:26.000 --> 03:32.710
We're actually done making the request and now we can start making our expectations and assertions first.

03:32.990 --> 03:40.380
We're going to expect that we get a 200 back then we're going to add a custom call back to end like

03:40.380 --> 03:45.300
we've done before we'll specify the error and response arguments and inside of here the first thing

03:45.300 --> 03:51.970
we'll do as always is handle the error if there is any error from the assertions above all we're going

03:51.970 --> 03:56.850
to do is return Garling done passing the error to the done function.

03:56.850 --> 04:02.010
Now we can make our custom assertion which means that we're going to want to query the database first

04:02.010 --> 04:09.840
up I'm going to use user and not find a by ID then I'm going to pass the ID in of the first user which

04:09.840 --> 04:11.890
I have access to the users.

04:12.160 --> 04:16.320
Going to grab the first user and I'm going to access the D property.

04:16.380 --> 04:21.510
Next up we can go ahead and add are called to then so we can do something when that user comes back

04:21.990 --> 04:22.710
right here.

04:22.710 --> 04:27.960
I'll add my function where we get that the user document and we can make our assertion about what's

04:27.960 --> 04:29.630
inside of the database.

04:29.640 --> 04:34.080
Now in this case the only thing we're going to assert is that the user tokens array has a length of

04:34.080 --> 04:35.000
zero.

04:35.200 --> 04:45.180
Expect user ADOT tokens ADOT length to be 0.

04:45.180 --> 04:49.800
Now that we have our one assertion in place we can go ahead and call done wrapping up the test suite

04:50.100 --> 04:54.240
and I can add a call to catch to catch any errors that might occur.

04:54.420 --> 05:01.050
Printing them to the screen correctly right here we're going to call done passing in the error argument.

05:01.050 --> 05:05.310
With this in place I'm going to go ahead and remove the comments up above and we can go ahead and run

05:05.310 --> 05:08.170
the test suite from the terminal by running.

05:08.170 --> 05:09.910
NPM test.

05:10.020 --> 05:15.270
Now once you get to the very bottom of our test file we should see our delete token out and the test

05:15.270 --> 05:16.980
case should be passing.

05:17.100 --> 05:22.680
If it is we are all done testing our routes and we can move on to start the integration right here where

05:22.770 --> 05:28.310
we create users route here's our delete route and the test case is indeed passing.

05:28.320 --> 05:30.030
We're expecting the length to be zero.

05:30.150 --> 05:36.330
If the length wasn't zero for example if it was one the test case would indeed fail because the value

05:36.330 --> 05:41.360
that we expect does not equal the value actually inside of the database.

05:41.400 --> 05:47.730
Now that we are done we can go ahead and wrap this video up by making a commit to save our changes right

05:47.730 --> 05:49.990
here inside of the terminal in just a second.

05:50.040 --> 05:51.710
We're going to see the test case fails.

05:51.870 --> 05:55.780
I'm going to revert that change and now we can go ahead and make it commit.

05:56.070 --> 06:01.940
I'm going to use clear to clear the terminal output and run get status to see the changes we have here.

06:01.980 --> 06:04.330
We just have changes to our server test.

06:04.350 --> 06:05.750
J.S. fine.

06:05.940 --> 06:12.300
Now aside from using a GUI like source tree which is a graphic user interface for managing get we can

06:12.300 --> 06:14.550
always run get diff.

06:14.610 --> 06:17.280
And this is going to let us see the changes to the file.

06:17.280 --> 06:21.900
Here you can see we have a lot of green lines which means these are additions to the repository.

06:21.930 --> 06:23.230
And what do we have in green.

06:23.250 --> 06:28.950
The code we wrote in this video everything looks great which means that we can make it commit get commit

06:28.950 --> 06:29.770
with the.

06:29.920 --> 06:32.820
And the flag or the combined am flag.

06:32.910 --> 06:34.870
Both do the exact same thing.

06:35.130 --> 06:44.110
And you can message for this one as add tests for delete forward slash users forward slash me forward

06:44.170 --> 06:45.600
slash tokin.

06:45.760 --> 06:48.680
With this in place I can make the commit and push it up to get help.

06:48.700 --> 06:52.510
And we are done in the next couple of videos.

06:52.510 --> 06:55.470
We're going to be integrating the users and to do it together.

06:55.480 --> 07:01.150
So when you created to do the user ID is associated with that to do and only that user can manage that

07:01.150 --> 07:01.740
to do.

07:01.810 --> 07:06.830
Currently inside of server J.S. all of the to do related routes are still public.

07:06.880 --> 07:10.630
They don't require authentication and we don't care who created that to do.

07:10.660 --> 07:12.620
We're simply going to return it regardless.

07:12.640 --> 07:13.810
All of that is getting fixed.

07:13.810 --> 07:15.520
Coming up next so stay tuned.

07:15.520 --> 07:17.280
I will see you next time.
