WEBVTT

00:00.150 --> 00:05.250
In this video you're going to learn how to hash users passwords before saving them to the database which

00:05.250 --> 00:09.590
means a user is still going to send the plain text password in the post user's request.

00:09.630 --> 00:14.820
You will still validate the plain text version making sure it's of a certain length then you're going

00:14.820 --> 00:17.640
to hash it salted and store it in the database.

00:17.640 --> 00:22.200
This is much more secure than what we're currently doing which is storing that plain text password which

00:22.260 --> 00:24.170
is a terrible idea.

00:24.180 --> 00:28.590
Now in order to get this hashing done we're going to use an algorithm called the script to be script

00:28.590 --> 00:32.700
is fantastic because it is super secure and it has salting built in.

00:32.700 --> 00:36.660
Which means you don't need to go through the effort to write the code to solve your passwords.

00:36.690 --> 00:39.930
You can simply take advantage of the B crypt algorithm.

00:40.140 --> 00:43.590
Now to install this over inside of the terminal we're going around NPM.

00:43.620 --> 00:46.050
I was at the module name.

00:46.050 --> 00:51.420
There are quite a few different variations of the B crypt algorithm on NPM.

00:51.480 --> 00:59.190
I always use the crypt J.S. and this library is completely written inside of javascript which means

00:59.190 --> 01:00.670
there are no dependencies.

01:00.690 --> 01:06.270
There is also a library called B crypt which has the same API but I run into so many problems with that

01:06.450 --> 01:09.030
especially across operating systems.

01:09.180 --> 01:15.900
B crypt dot J.S. at the most recent version 2.0 3.0 and I'm going to tack on the Save flag to add it

01:15.900 --> 01:17.110
to my package.

01:17.190 --> 01:18.700
Jason File.

01:18.750 --> 01:23.700
Now before we actually add this to the application let's just play around with B crypt really quickly

01:23.790 --> 01:27.790
over in the hashing J.S. file over inside of hashing.

01:27.810 --> 01:31.360
J.S. we can comment out all the other examples we have.

01:31.410 --> 01:33.860
You can feel free to delete these or keep them.

01:33.860 --> 01:36.860
This is going to be one of the last times we actually edit this file.

01:37.620 --> 01:38.450
Up the very top.

01:38.460 --> 01:41.340
We are going to load in the algorithm.

01:41.440 --> 01:48.850
Let's make a constant called B crypt and set it equal to the return result from requiring B crypt J

01:48.850 --> 01:50.170
S.

01:50.200 --> 01:53.030
Now if you want to look at the docs you can always head over to NPM.

01:53.050 --> 01:54.700
Let me just point you in the right direction.

01:54.710 --> 01:55.790
Really quickly.

01:55.820 --> 01:56.380
B crypt.

01:56.400 --> 01:59.130
J.S. NPM should get you the right result.

01:59.140 --> 01:59.930
And here it is.

02:00.070 --> 02:02.630
It's the NPM package B crypt dot J.

02:03.010 --> 02:05.440
This module has fantastic documentation.

02:05.440 --> 02:09.730
So if you ever want to read more about the algorithm or see all of the other methods that are available

02:09.730 --> 02:12.610
to you it's all defined here.

02:12.610 --> 02:17.300
Now in order to use a B script J.S. inside of a hashing file we need to do two things.

02:17.320 --> 02:19.500
First we have to get some sort of value.

02:19.870 --> 02:26.430
Let's make a variable we'll call it password and we'll set it equal to 1 to 3 A B C.

02:26.620 --> 02:30.870
Exclamation mark and then we're going to go ahead and actually hash it.

02:30.970 --> 02:34.920
Now in order to hash a password using the script we have to call two methods.

02:35.080 --> 02:36.660
One is Jeon salt.

02:36.730 --> 02:38.210
This is going to generate a salt.

02:38.230 --> 02:40.320
We can use to salt our password.

02:40.360 --> 02:44.390
The other one is the hash method which actually goes through the hash in process.

02:44.410 --> 02:46.840
Now sorting passwords is really important.

02:46.840 --> 02:52.300
Imagine to have a password like password one if I hashed out without salting it I'm going to get the

02:52.300 --> 02:53.700
same result every time.

02:53.830 --> 02:58.190
Let's just say for example purposes the result is an an end.

02:58.320 --> 03:00.900
Now obviously that's not the case but this is just an example.

03:01.020 --> 03:07.210
Now the problem with this strategy is someone can precompile a list of passwords and hashed values and

03:07.210 --> 03:09.130
they can use that as a lookup table.

03:09.130 --> 03:15.730
They can say hey I've ran through 15000 English words including password 1 and I had the hash values

03:15.730 --> 03:21.550
for all of them in an object where the key is the password and the value is the actual hash.

03:21.550 --> 03:25.960
All I need to do is find the one that matches m and n and boom they have your password.

03:26.140 --> 03:27.550
When you sult a password.

03:27.550 --> 03:30.960
You're adding a bunch of random characters to that hash.

03:30.970 --> 03:36.370
This means that even if I hash the same password multiple times I'll get a different result.

03:36.490 --> 03:39.990
So no one can precomputed table to look at the passwords.

03:40.060 --> 03:46.330
Now in order to generate that salt we're going to call the crypt dot Janise salt.

03:46.550 --> 03:48.470
Jen salt takes two arguments.

03:48.490 --> 03:53.080
It's an asynchronous function the second argument is a callback function and the first one is the number

03:53.080 --> 03:55.770
of rounds you want to use to generate the salt.

03:55.900 --> 04:01.020
If the crypt is inherently slow and that's a good thing it's going to prevent brute force attacks.

04:01.030 --> 04:03.290
We're going to use 10 as the number of rounds.

04:03.310 --> 04:06.470
The bigger the number the longer the algorithm is going to take.

04:06.490 --> 04:11.320
I know people who use 120 rounds they intentionally make the crypt take longer.

04:11.350 --> 04:14.380
So no one can brute force these calls.

04:14.380 --> 04:20.280
Now obviously adding unnecessary length to your API is not a great idea but what it comes to passwords.

04:20.290 --> 04:21.760
It definitely is.

04:21.790 --> 04:25.600
This is going to prevent someone from making a million requests every second.

04:25.600 --> 04:30.460
Instead they may be able to make a few hundred which is going to greatly reduce the chance that they'll

04:30.460 --> 04:32.500
be able to crack a password.

04:32.500 --> 04:35.720
Now we're going to generate this salt passing in our callback function.

04:35.800 --> 04:41.460
We'll get an error and a salt value and then we can go ahead and finish off the Aero function and end

04:41.490 --> 04:49.470
here this is where we're going to actually do the hashing decrypt dot hash and inside of here we're

04:49.470 --> 04:51.270
going to pass in three arguments.

04:51.330 --> 04:53.850
The first one is the thing to hash in our case.

04:53.850 --> 04:55.770
We're going to be hashing the password.

04:55.770 --> 04:57.540
We have that variable declared right here.

04:57.540 --> 04:59.490
The second is the salt to use.

04:59.490 --> 05:00.120
We have the salt.

05:00.120 --> 05:03.050
We just generated it via the function up above.

05:03.060 --> 05:08.490
The third is the callback function the callback function is going to get called with an error if any.

05:08.490 --> 05:14.440
And the hash value this hash value is what we want to store inside of our database.

05:14.460 --> 05:15.870
We don't want to store the password.

05:15.870 --> 05:17.770
We want to store the hash.

05:18.090 --> 05:24.240
Let's go out and log this to the screen using console log and simply passing in hash that I'm going

05:24.240 --> 05:28.050
to go ahead and run the hashing file inside of the terminal.

05:28.050 --> 05:34.940
I'll use clear to clear the terminal output and we can run node playground forward slash hashing.

05:35.070 --> 05:36.750
J.S. when I do this.

05:36.830 --> 05:39.140
I get my hashed value.

05:39.140 --> 05:43.670
Now this hash value has a lot of really awesome information stored inside of it and as the number of

05:43.670 --> 05:45.910
rounds you can see we have 10 right here.

05:45.980 --> 05:48.330
It has the length for the hash and the salt.

05:48.410 --> 05:51.050
All of that information is stored right inside.

05:51.050 --> 05:55.520
There's no reason to have two things a salt and a password value in the database.

05:55.520 --> 05:57.350
That's why the crypt is so fantastic.

05:57.350 --> 06:02.550
The self is built in and there's nothing to worry about in terms of storing a separate value.

06:02.840 --> 06:05.580
Now that we have this hash we can look at how to actually compare.

06:05.700 --> 06:11.300
If this hash equals the plaintext password this is what we're going to do when someone logs in to illustrate

06:11.330 --> 06:11.950
this.

06:12.050 --> 06:15.720
I'm going to create a variable called hashed password.

06:15.870 --> 06:18.100
I just copied the password to the clipboard.

06:18.210 --> 06:23.580
I'm going to paste it inside of quotes right here and now we're going to try to compare this value to

06:23.640 --> 06:24.600
the string.

06:24.630 --> 06:26.730
One two three ABC.

06:26.820 --> 06:28.170
Exclamation mark.

06:28.170 --> 06:32.110
To compare values we're going to go ahead and use our final function off of B crypt.

06:32.130 --> 06:34.320
This is B crypt dot.

06:34.320 --> 06:41.160
Compare a B crypt dot compare takes the plane value the hash value and then it lets you know if those

06:41.160 --> 06:43.090
two equal each other.

06:43.230 --> 06:48.510
The first argument to compare is the plain string in our case we have our plane password stored in the

06:48.510 --> 06:49.920
password variable.

06:49.920 --> 06:57.030
The second argument is the hash value we have that in hashed password and the third argument that is

06:57.030 --> 06:58.790
simply a callback function.

06:58.800 --> 07:02.880
It might get a call with an error and it is going to get called with a result.

07:02.970 --> 07:08.870
The result is either true or false it's true if the password matches the hash password and it's false.

07:08.880 --> 07:11.060
If they do not equal each other.

07:11.250 --> 07:16.140
Now we can finish off our aero function and we can go ahead and print the value of response to the screen

07:16.440 --> 07:17.900
using console dialog.

07:17.940 --> 07:19.220
R e s.

07:19.500 --> 07:24.750
And we can comment out our previous calls to John salt and hash since we already have the hash value

07:24.750 --> 07:25.800
right here.

07:25.800 --> 07:30.820
Now I can say it hashing out J S and over inside of the terminal we can run the file.

07:30.960 --> 07:32.110
I'm going to rerun the file.

07:32.280 --> 07:33.630
And what do we get we get.

07:33.630 --> 07:40.830
True we're getting true back because the password password 1 2 3 ABC exclamation mark does indeed equal

07:40.920 --> 07:42.740
this hashed value.

07:42.750 --> 07:49.180
Now if we were to change the password setting an equal to something else like 1 2 3 exclamation mark

07:49.180 --> 07:52.570
without the ABC this is going to result in false.

07:52.570 --> 07:55.580
If I rerun the file that's exactly what we get.

07:55.630 --> 07:59.910
And this is what we're going to do when we loggin a user We're going to fetch the value out of the database

07:59.920 --> 08:04.810
the hashed password value we're going to compare it to the plain text value they gave us and then we'll

08:04.810 --> 08:09.840
be able to use this response variable to determine whether or not the password was correct.

08:09.850 --> 08:14.070
Now that we know how to use be crypt we're going to add it inside of our user model.

08:14.110 --> 08:17.520
We're going to be hashing all of our passwords before we save them.

08:17.770 --> 08:22.000
Now in order to do this but we're going to explore is something called mongoose middleware mongoose

08:22.000 --> 08:26.080
middleware lets you run certain code before or after certain events.

08:26.110 --> 08:30.280
For example an update of that we can run some code before we update a model.

08:30.340 --> 08:32.470
We can run some code after we update it.

08:32.500 --> 08:38.890
In our case we want to run some code before a document is saved before we ever save that document to

08:38.890 --> 08:39.560
the database.

08:39.610 --> 08:45.400
We want to make sure the hashed password is in place to get this done we're going to explore the documentation

08:45.430 --> 08:47.120
real quick so you know where it is.

08:47.160 --> 08:52.720
There is a ton of middleware methods that we won't be using but you should know where they are mongoose

08:52.810 --> 08:55.990
middleware is going to bring you to that documentation page.

08:55.990 --> 09:00.880
Here we are we have the docs middleware page and up above they outline all of the different events.

09:00.880 --> 09:04.720
We have an in it event validate save remove and countless others.

09:04.720 --> 09:06.760
Well not countless But quite a few.

09:06.850 --> 09:12.370
If you scroll down below you can get a quick idea about exactly how it works right here we have some

09:12.380 --> 09:19.240
schema pretended it's our user schema and what we do is we attach an event user schema dot pre runs

09:19.270 --> 09:22.230
the code before the event the event is saved.

09:22.240 --> 09:27.730
And right here we actually run the code we call next when we're done and that is when the model gets

09:27.730 --> 09:29.260
saved to the database.

09:29.260 --> 09:30.790
This is exactly what we're going to do.

09:30.880 --> 09:35.830
Only inside of the callback we're going to be hashing and the password to get this done we can pull

09:35.830 --> 09:41.740
up Adam and we can start modifying our user schema down near the bottom of the file just below find

09:41.740 --> 09:42.570
by token.

09:42.610 --> 09:51.120
We're going to attach something else to user schema user schema the dot pre this is going to run some

09:51.120 --> 09:56.760
code before a given event and the event we want to run code before is the save event before we ever

09:56.910 --> 09:58.650
save the doc to the database.

09:58.710 --> 10:00.810
We want to make some changes to it.

10:00.810 --> 10:05.070
Now I am going to be using a regular function once again and because we are going to need access to

10:05.070 --> 10:06.470
the this binding.

10:06.630 --> 10:11.820
So I use the function keyword and this is going to get called with the next argument you have to provide

10:11.820 --> 10:15.650
this argument and you have to call it somewhere inside of your function.

10:15.720 --> 10:20.280
If you don't provide it and you don't call it the middleware is never going to complete and your program

10:20.340 --> 10:23.280
is going to crash inside of here.

10:23.280 --> 10:28.380
We're going to get access to the individual document much like we've got access to it up above and generate

10:28.390 --> 10:29.320
auth token.

10:29.580 --> 10:33.950
We created a variable lowercase U user and said equal to the value of this.

10:33.960 --> 10:36.530
That's exactly what I'm going to do right here.

10:36.570 --> 10:39.080
We're make a variable user setting an equal to this.

10:39.180 --> 10:42.900
And now we can go ahead and check if the password was modified.

10:42.900 --> 10:44.720
Now this is a really important thing.

10:44.920 --> 10:49.530
There is going to be times where we save the document and we're never going to have updated the password

10:49.740 --> 10:52.150
which means the password will already be hashed.

10:52.170 --> 10:55.990
Imagine I saved a document with the plain text password then the password gets hashed.

10:56.070 --> 10:59.270
Later on I update something that's not the password like the email.

10:59.310 --> 11:00.990
This middleware is going to run again.

11:00.990 --> 11:05.970
That means we're going to hash our hash and the program is going to break but we're going to do is use

11:05.970 --> 11:15.040
a method available on our instance called user data is modified is modified takes an individual property

11:15.430 --> 11:22.150
like password and it returns True or false returns true if password is modified it returns false if

11:22.150 --> 11:22.810
it's not.

11:22.870 --> 11:24.670
And we only want to encrypt the password.

11:24.670 --> 11:33.010
If it was just modified which means we can wrap this inside of an IF condition if the user is password

11:33.010 --> 11:35.310
modified function returns true.

11:35.410 --> 11:37.390
We're going to go ahead and run some code.

11:37.420 --> 11:39.290
This is where we're going to hash the password.

11:39.490 --> 11:44.050
If it is not modified inside of the else statement we'll simply call next.

11:44.080 --> 11:45.820
Moving on with the middleware.

11:46.000 --> 11:51.760
Now if the password is modified This is where we want to add our two calls the call to gen's salt and

11:51.820 --> 11:56.770
the call to hash before we can call either of them we do have to load them in up at the top of the file

11:57.190 --> 11:58.220
just below load.

11:58.230 --> 12:04.330
I'm going to create a new constant called B crypt and will require it just like we did in hashing J

12:04.350 --> 12:07.210
J.S. require the B script J.

12:07.220 --> 12:11.650
S now that we have an imported it's time for you to complete the rest.

12:11.650 --> 12:13.840
This is going to be your challenge.

12:13.840 --> 12:20.050
You already know how to create a salt and how to hash a password you have access to the password via

12:20.350 --> 12:22.290
user password.

12:22.450 --> 12:28.570
So instead of referencing the password variable like we do here you would reference user password.

12:28.570 --> 12:35.050
Now once you have the hash value after you call decrypt hash you're going to set it on user dot password

12:35.080 --> 12:41.310
user dot password is going to equal the hash value then you're going to go ahead and call.

12:41.380 --> 12:44.730
Next you have to call next after you set that value.

12:44.740 --> 12:47.140
Otherwise the middleware will never complete.

12:47.140 --> 12:49.000
All you have to do is fill out the rest.

12:49.030 --> 12:51.200
You have to call the genset function.

12:51.250 --> 12:57.520
You have to call the hash function and inside of the callback for hash you have to add these two statements.

12:57.520 --> 13:03.640
Once you're done want you to startup the server and make a call to sign up a new user inside of postman.

13:03.640 --> 13:08.950
Once you have the call completed and you get a 200 You should be able to head into Roboam mango view

13:09.020 --> 13:14.500
the record and you should see the hashed password as opposed to the plain text password.

13:14.500 --> 13:20.140
Also feel free to wipe your database using robo Mongo since we do have users with plain text passwords

13:20.140 --> 13:24.670
in there and it's a good idea to make sure that you don't have any old stray documents in there that's

13:24.670 --> 13:27.060
going to cause any errors in the future.

13:27.070 --> 13:28.330
Take a moment to knock this out.

13:28.330 --> 13:29.020
Test it.

13:29.020 --> 13:38.360
Make sure the stored password is to be hashed password and when you're done go ahead and click play.

13:38.420 --> 13:38.900
How'd you do.

13:38.900 --> 13:44.160
Hopefully you were able to integrate the B crypt algorithm into this middleware.

13:44.210 --> 13:50.900
The first thing I'm going to do is generate a salt using be crypt dot Jeon salt and we're going to set

13:50.900 --> 13:54.110
it up exactly like we did inside of our hashing File.

13:54.140 --> 13:58.370
We're going to pass in 10 for the rounds and then we'll have our call back here.

13:58.370 --> 14:04.050
We're going to get the actual salt value and we'll be able to use that to call hash.

14:04.070 --> 14:10.580
Next up we are going to call hash B crypt dot hash passing in our three arguments the first being the

14:10.580 --> 14:15.920
plain password which you have access to via user dot password.

14:15.920 --> 14:17.230
The second being the salt.

14:17.240 --> 14:19.110
We have that in the salt variable.

14:19.220 --> 14:21.910
And the third being our callback function.

14:22.010 --> 14:25.850
This is where we get the actual cash value.

14:25.850 --> 14:32.690
Now once we have the hash value we're going to need to update the user document by setting user password

14:33.020 --> 14:34.460
equal to the hash.

14:34.580 --> 14:39.530
Remember the user password property was just equal to the plaintext passwords so we have to override

14:39.530 --> 14:44.630
that in order to properly hide the plain text password then we're going to call next which is going

14:44.630 --> 14:48.710
to complete the middleware and it'll move on it to save the document.

14:48.710 --> 14:53.720
The next thing you needed to do after completing this was test it out over inside of the terminal going

14:53.720 --> 14:59.170
to shut down at my server it already is shut down so I can move into Roboam mango and wipe my database

15:02.320 --> 15:06.700
now back in the terminal I can start it up using node server server.

15:06.770 --> 15:07.150
J.

15:07.330 --> 15:11.920
And we can make a post man request over inside of post man.

15:11.950 --> 15:17.230
I'm going to make a post user's request to sign up a new user and since I just wipe the database I can

15:17.230 --> 15:19.270
use my default data right here.

15:19.270 --> 15:23.120
Notice the plain password it's password followed by an exclamation mark.

15:23.140 --> 15:27.640
Now when I send this off we still get to 200 and we can't quite tell if it worked or not because the

15:27.640 --> 15:32.980
only data we get back is the ID and the email which hasn't changed based on the code we just wrote in

15:32.980 --> 15:35.170
order to make sure the password is getting hashed.

15:35.170 --> 15:40.600
I'm going to head over to Roboam mango refresh my connection to get access to that to do app database

15:40.810 --> 15:44.460
and I'm going to explore the users collection inside of here.

15:44.460 --> 15:45.850
I can view my documents.

15:45.850 --> 15:51.980
I have one document and right here you see the hashed password and this is fantastic.

15:52.030 --> 15:54.580
The plain text password is no longer in sight.

15:54.580 --> 15:56.640
Instead we're storing the hashed password.

15:56.710 --> 16:01.780
So if someone does get access to this value they're not going to be any closer towards getting the user's

16:01.840 --> 16:02.950
password.

16:03.010 --> 16:07.320
Now that we have this in place we can go ahead and make a commit over inside of the terminal.

16:07.330 --> 16:15.150
I'm going to shut down the server run it get status and right here we have our three changed files.

16:15.200 --> 16:23.110
I can then run get commit with the M flag to make a message a good message for this one as hash user

16:23.140 --> 16:27.210
password before saving.

16:27.220 --> 16:31.250
I'm going to make the commit push it up to get help and that is it for this one.

16:31.260 --> 16:35.790
That is it for this one I will see you next time where we start testing those two routes.

16:35.800 --> 16:40.240
We're going to kick things off by updating how we seed the database that's coming up next so stay tuned.

16:40.240 --> 16:41.500
I will see you then
