WEBVTT

00:00.360 --> 00:06.020
Now that we have the log in or out in place the goal for this video is to write two test cases for it.

00:06.070 --> 00:11.250
We're going to write one that makes sure when a valid e-mail password combo is sent we get an x Aalto

00:11.260 --> 00:16.240
can back and we're going to write a second test case that makes sure if the log in credentials don't

00:16.240 --> 00:19.830
match a user in the database we return a 400.

00:19.840 --> 00:22.920
Now before I do any of that I am going to remove this comment right here.

00:22.930 --> 00:25.990
This is left over from the challenge in the previous video.

00:25.990 --> 00:30.730
Now I can save the server file and we can move into the server test file head to the bottom and add

00:30.730 --> 00:31.150
a new.

00:31.150 --> 00:40.950
Describe a block for this route describe this block of tasks will be for post forward slash users a

00:40.950 --> 00:46.920
forward slash log in then we can set up our aero function we'll have our two test cases the first test

00:46.920 --> 00:56.190
case we're going to do together it should log in user and return auth token.

00:56.200 --> 01:01.750
This is when we have a valid email and password as the request body we can set up our function with

01:01.750 --> 01:02.890
our Done argument.

01:02.980 --> 01:06.550
And now we can go ahead and define the second test case and this is the one that you're going to be

01:06.550 --> 01:08.250
doing as a challenge.

01:08.320 --> 01:15.900
It should reject invalid loggin this test case is going to make sure that if something goes wrong like

01:15.900 --> 01:20.650
the password doesn't match the user's password the logon is indeed rejected.

01:20.820 --> 01:25.260
We're going to knock out the first test case together and the second one that will be your challenge

01:25.290 --> 01:26.340
for the video.

01:26.430 --> 01:31.350
Now in order to make either of these requests we are going to need access to the seed data for this

01:31.350 --> 01:32.300
first test case.

01:32.310 --> 01:37.110
I'm going to go ahead and use the second user's e-mail and password and then we can go ahead and query

01:37.110 --> 01:38.910
this user inside of the database.

01:38.910 --> 01:44.580
After the call comes back and make sure the token was added to get started with that I am going to call

01:44.580 --> 01:51.550
request passing in the application and we will be making a post request to forward slash users forward

01:51.550 --> 01:53.160
slash loggin.

01:53.190 --> 01:58.910
Now we can set up the body data we want to send which in our case is the email and the password.

01:59.190 --> 02:03.010
We have access to the email property via the user's array.

02:03.150 --> 02:08.130
We're gonna grab that second user using the index of one and we'll grab his e-mail and we can do the

02:08.130 --> 02:10.560
exact same thing for the password.

02:10.650 --> 02:14.640
I'm going to set password equal to we're going to go into that user's array.

02:14.640 --> 02:18.580
Grab the first item and grab the password property.

02:18.600 --> 02:22.520
Now a decent place at the request has been successfully set.

02:22.530 --> 02:24.370
We have a valid e-mail and password.

02:24.390 --> 02:29.330
We have the right HTP method and you R-AL which means now it's time to make some assertions.

02:29.340 --> 02:30.620
First up the easy ones.

02:30.660 --> 02:36.700
Let's expect a 200 to come back as the status which it will be if everything goes as planned.

02:36.780 --> 02:41.670
And we can make an assertion that verifies an X auth token was sent back as a header.

02:41.910 --> 02:51.710
I'm going to expect using a custom expect function inside of here we will expect that the response headers

02:51.710 --> 02:54.950
object has an X or token will use bracket notation.

02:54.950 --> 03:01.910
Once again since we have a hyphen in our property name and we're going to expect this value to exist

03:02.750 --> 03:07.310
then the next thing we can do is call and and this is where we're going to set up our custom asynchronous

03:07.310 --> 03:10.110
function which is going to go ahead and query the database.

03:10.220 --> 03:15.530
I'm going to call end passing in the custom function which gets called with a potential error and the

03:15.530 --> 03:16.460
response.

03:16.910 --> 03:21.680
And like all of the cases where we used a custom function in and the first thing we're going to do is

03:21.680 --> 03:23.930
check for errors if there are errors.

03:23.930 --> 03:25.660
There is no reason to continue.

03:25.670 --> 03:29.400
We can simply return by calling down and passing in the error.

03:29.450 --> 03:32.090
So it gets properly printed to the screen.

03:32.090 --> 03:37.070
Now if there are no errors with the assertions up above we are going to need to find the user that we

03:37.070 --> 03:44.030
potentially created a token for using user and we can query it using find by ID since we already know

03:44.030 --> 03:46.470
the idea of the user it's sitting right here.

03:46.610 --> 03:49.580
Next up I can go ahead and pass in that ID.

03:49.730 --> 03:56.600
I'm going to go ahead and access the first item in the user's array grab that id property just like

03:56.600 --> 03:57.020
this.

03:57.110 --> 04:02.480
And we can tack on a then call back to do something when the user query finishes.

04:02.480 --> 04:08.300
Now if it finishes what we want to do is assert that the token that came back was indeed added into

04:08.300 --> 04:09.720
the tokens array.

04:09.860 --> 04:20.370
Let's expect that the user has a tokens array and that's the first item includes using to include the

04:20.370 --> 04:22.320
following actual butes.

04:22.320 --> 04:25.170
Now we have used to include before it doesn't mean it equals.

04:25.170 --> 04:30.360
It means that the tokens object that first item has at least these properties.

04:30.360 --> 04:37.170
We need an access property equal to off and we need a token property equal to the token we got sent

04:37.170 --> 04:37.820
back.

04:37.920 --> 04:40.110
That's in response headers object.

04:40.230 --> 04:44.820
And we can use bracket notation to get the value for x off.

04:44.820 --> 04:50.910
Now this is our assertion inside of the query and we are all done which means we can call done like

04:50.910 --> 04:52.820
our other asynchronous tasks.

04:52.830 --> 04:57.360
We also want to tack on a catch call back to catch the error that might occur right here.

04:57.360 --> 05:04.230
If they're not equal on an add a catch call we're going to get the error and we're simply going to pass

05:04.230 --> 05:06.960
it in to done just like this.

05:06.960 --> 05:09.830
Now this is something that we've done for most of our queries.

05:09.900 --> 05:12.620
When we pass a custom function in to end.

05:12.690 --> 05:17.220
But if you notice up above for sign up we did not do that right here.

05:17.220 --> 05:21.590
All I'm going to do is copy the line from below the highlighted code right here.

05:22.360 --> 05:24.740
Move up to the test case for we forgot to add it.

05:24.760 --> 05:27.890
It should create a user and paste it right here.

05:28.000 --> 05:30.870
Now with the test case still fail if one of these assertions failed.

05:30.910 --> 05:33.170
You betcha it's going to look for a catch case.

05:33.220 --> 05:38.350
It's never going to find one which means Dunn doesn't get called and the test will time out but you're

05:38.350 --> 05:40.090
not going to get a useful error message.

05:40.150 --> 05:45.130
By adding this you're going to get the exact error message depending on which assertion failed and why

05:45.130 --> 05:46.110
it failed.

05:46.120 --> 05:51.340
Now that we have this in place our test case is complete with our custom query in place we can go ahead

05:51.370 --> 05:54.830
and save our test file and run the test suite from the terminal.

05:54.850 --> 05:59.620
I'm going to use NPM test to start up the test suite we're first going to move through our to do related

05:59.620 --> 06:00.380
tasks.

06:00.400 --> 06:04.060
Eventually we'll get to our get users test which is coming up next.

06:04.150 --> 06:07.620
And our Sign-Up test all of those test cases are passing.

06:07.630 --> 06:08.800
Here is our loggin test.

06:08.800 --> 06:11.650
It did indeed pass which is fantastic.

06:11.650 --> 06:14.560
Now the second test case failed because I haven't filled it out.

06:14.560 --> 06:16.480
That's perfectly fine as long as you're.

06:16.480 --> 06:19.820
Should logon user and return auth token test as passing.

06:19.840 --> 06:21.980
You are ready to move on.

06:22.270 --> 06:27.430
Now if one of these values did not match to include would throw a proper error and to prove that I can

06:27.430 --> 06:29.940
simply change auth to off t.

06:30.130 --> 06:35.410
This proves that that is essential to make sure to add this catch call if you don't call it you're not

06:35.410 --> 06:39.270
going to get a clear error message which is just going to make your life a lot harder.

06:39.270 --> 06:44.500
You're gonna have to dig around and figure out exactly why things are not working as expected this time

06:44.500 --> 06:45.000
around.

06:45.010 --> 06:50.110
We do get an error and it's really clear we expected some object to include these values.

06:50.110 --> 06:55.680
These values obviously were in that object and we can go right to the source to figure out why.

06:55.810 --> 06:59.620
Now that we're done with the first test case let's go ahead and move on to the second one and this is

06:59.620 --> 07:01.030
going to be your challenge.

07:01.030 --> 07:04.620
This test case is going to be really similar to the one we just created.

07:04.630 --> 07:09.010
The only thing you're going to change is instead of passing in a valid password you're going to pass

07:09.010 --> 07:12.290
in an invalid password and then you're going to tweak all of your assertions.

07:12.430 --> 07:14.310
The 200 should be a 400.

07:14.470 --> 07:17.490
You should expect the X auth token to not exist.

07:17.590 --> 07:24.160
And down below you should expect that the user tokens array has a length equal to zero because no token

07:24.370 --> 07:27.190
should have been created and it didn't have any to start with.

07:27.190 --> 07:29.360
So the length should still be 0.

07:29.380 --> 07:30.950
Take a moment to knock this out.

07:30.970 --> 07:34.600
You can actually copy the contents of the test case up above.

07:34.600 --> 07:40.350
Paste it into the test case down below tweak it then rerun the test suite make sure everything passes

07:40.360 --> 07:42.140
and if it does you're good to go.

07:42.160 --> 07:42.910
Pause the video.

07:42.910 --> 07:43.790
Knock this out.

07:43.840 --> 07:44.380
Test it.

07:44.380 --> 07:47.920
And when you're done click play.

07:47.920 --> 07:48.480
All right.

07:48.520 --> 07:53.290
I'm going to get started by copying the code from up above and pasting it down below.

07:53.290 --> 07:56.780
Then we can tweak it to fit what this test is supposed to test.

07:56.830 --> 08:01.760
I'm going to change the password to anything other than what it is by concatenating some value.

08:01.840 --> 08:03.730
The number one will do the trick.

08:03.730 --> 08:06.210
And then we can go ahead and tweak the assertions.

08:06.220 --> 08:08.880
The 200 should turn into a 400.

08:08.920 --> 08:10.810
We should not get an x or token.

08:10.870 --> 08:13.090
So I'm going to use to not exist.

08:13.150 --> 08:18.850
And down below instead of expecting the first item to include certain properties we're going to expect

08:18.850 --> 08:25.540
that the array itself has a length equal to zero which means we can remove the entire to include call

08:25.720 --> 08:30.640
and replace it with one to be 0 just like this.

08:30.670 --> 08:31.840
And that's all it takes.

08:32.020 --> 08:34.450
Tweaking this test case really isn't too bad.

08:34.450 --> 08:39.340
And if we now rerun the test suite we should see all of the test cases passing.

08:39.430 --> 08:43.570
This will be the final time we rerun it for this video so you'll only have to watch these test cases

08:43.810 --> 08:46.020
go through just this once.

08:46.030 --> 08:48.810
Here we go we are nearing the end Rathi sign up call.

08:48.850 --> 08:53.380
Now we're at the loggin call all of our test cases are passing which is fantastic.

08:53.380 --> 08:57.070
All of the tweaks to our test case do appear to be working which means we are done.

08:57.160 --> 08:59.860
We can make a comment and wrap this one up.

08:59.860 --> 09:03.370
I'm going to run and get status and we should have those two changed files.

09:03.400 --> 09:08.530
We made a small tweak to server and we added a few tests to the server test file get commit with the

09:08.610 --> 09:17.650
AM flag we'll add those to the next commit ad tests for post users logon.

09:17.750 --> 09:18.860
I'm going to make the commit.

09:18.860 --> 09:21.500
Push it up to get how and that is it for this one.

09:21.590 --> 09:26.040
I will see you in the next video where you are going to explore how to log out users.

09:26.090 --> 09:29.290
This means we'll be deleting all tokens as opposed to creating them.

09:29.360 --> 09:30.100
It's coming up next.

09:30.110 --> 09:31.010
So stay tuned.

09:31.040 --> 09:32.020
We'll see you then
