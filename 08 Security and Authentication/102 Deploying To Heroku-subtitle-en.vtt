WEBVTT

00:00.420 --> 00:05.360
In this video we're going to get the to do API back on Heroku before we do though.

00:05.370 --> 00:10.750
Let's go ahead and connect to our production database via robo Mongo so we can manage that data.

00:10.770 --> 00:16.540
We have some really old leftover data from before we updated the to do end user models.

00:16.650 --> 00:22.340
Now to get that you are Al we know we can run a command from the terminal Heroku config would work.

00:22.380 --> 00:28.350
Or more specifically we can run Heroku config call and get followed by the environment variable name

00:28.740 --> 00:35.490
Mongo D-B underscore you are I and what we get back is a really long connection string.

00:35.640 --> 00:39.360
Now this connection string actually contains a ton of really useful information.

00:39.420 --> 00:43.980
We're going to need to know which piece is which because we're going to have to add all of this into

00:43.980 --> 00:49.770
individual fields inside of the Roble Mongo application in Roboam Mongo.

00:49.830 --> 00:55.260
If we go ahead and add a new connection by clicking the two computers and clicking create you see that

00:55.260 --> 00:57.760
we don't get a place for a long connection sharing.

00:57.780 --> 01:03.510
Instead we have things like address port and under authentication we have things like database username

01:03.510 --> 01:04.420
and password.

01:04.440 --> 01:08.020
All of this exists inside of the string we have right here.

01:08.250 --> 01:11.130
Now the first part the part I have highlighted this is the protocol.

01:11.160 --> 01:13.920
It's a mongo DB connection request.

01:13.920 --> 01:16.810
Next up we have the username and password.

01:16.830 --> 01:22.290
This starts after the protocol and it goes up to the at symbol right in the middle somewhere you should

01:22.290 --> 01:24.840
see a call on everything before the colon.

01:24.840 --> 01:26.960
What I have highlighted here is the user name.

01:27.030 --> 01:29.680
Everything between the colon and the at symbol.

01:29.700 --> 01:31.610
That is the password.

01:31.640 --> 01:36.020
Now after that we have the address itself after the address.

01:36.030 --> 01:41.910
We have the port and after the Port we have a forward slash followed by the database we're going to

01:41.910 --> 01:45.000
go ahead and transfer all of this information into Roboam Mongo.

01:45.000 --> 01:47.480
Starting with the actual address.

01:47.580 --> 01:50.090
Everything from at to the Kallen.

01:50.310 --> 01:51.690
I'm going to copy this to the clipboard.

01:51.690 --> 01:57.530
Move over into Roboam Mongo and paste it right in the address field under connection.

01:57.530 --> 02:02.990
I can also give this connection a name Heroku to do API.

02:03.000 --> 02:08.790
Next up let's go ahead and grab the port the port which we can get over inside of the terminal is 1

02:08.850 --> 02:10.720
7 7 3 6.

02:10.770 --> 02:15.030
I'm going to copy that move into robo Mongo and paste it right here.

02:15.210 --> 02:21.270
Next up under authentication we're going to have to perform authentication providing a database a user

02:21.270 --> 02:23.020
name and a password.

02:23.190 --> 02:27.220
We can keep the off mechanism the default value as shown here.

02:27.240 --> 02:33.310
First up the database the database is the very end of the connection string after the forward slash.

02:33.330 --> 02:34.750
We have our database name.

02:34.830 --> 02:39.900
We can simply copy this take it and paste it into the database field.

02:39.930 --> 02:41.490
Next up username and password.

02:41.490 --> 02:43.380
Let's do the user name first.

02:43.380 --> 02:47.790
Over inside of the terminal we have our user name right here and you'll notice the user name is actually

02:47.790 --> 02:50.310
identical to the database name.

02:50.340 --> 02:52.980
I'm going to go ahead and copy it anyways in case yours is not.

02:53.040 --> 02:58.140
So it should be and over inside of Roboam Mongo we can paste it inside of the user name field.

02:59.020 --> 03:04.370
The last field to copy is the password that exists over inside of the connection string between the

03:04.400 --> 03:06.930
colon and the at symbol.

03:06.950 --> 03:12.620
I'm going to copy this pasted inside of Roboam mango and before we click Save go ahead and click the

03:12.620 --> 03:17.580
test button the test button is going to test the connection before you actually save the details.

03:17.600 --> 03:22.270
So if something goes wrong you can change it without having to edit the existing connection.

03:22.290 --> 03:26.230
Right here we have a couple checkmarks it looks like everything did go as expected.

03:26.360 --> 03:31.100
I can close the test save that connection and then we can connect it to the database by double clicking

03:31.100 --> 03:31.680
it.

03:31.750 --> 03:39.780
Now over in the left hand side we have our local Mongo database and we have our Heroku to do API database.

03:39.890 --> 03:45.590
I can open up the individual database go into collections and inside of here we have a dues collection.

03:45.590 --> 03:47.310
This has some really old data.

03:47.420 --> 03:50.800
So I'm going to go ahead and drop this now.

03:50.910 --> 03:54.530
We have our database with no collections and no documents.

03:54.540 --> 03:56.070
This means that we are good to go.

03:56.130 --> 04:00.170
We can deploy to Heroku and everything should work as expected.

04:00.180 --> 04:04.350
Now things are only going to work as expected because we have all our environment variables configured

04:04.560 --> 04:06.710
including the database you are l n d j.

04:06.740 --> 04:07.530
W T.

04:07.530 --> 04:08.160
Secret.

04:08.280 --> 04:15.180
If you do not have the JWT secret configured from the last video this call is not going to work as expected.

04:15.180 --> 04:19.400
Make sure to have a value right here just like we set up previously.

04:19.560 --> 04:24.430
With this in place though I can run get status to confirm I have no changes that need to be committed

04:24.690 --> 04:30.440
and I can run get push Heroku master to deploy to Heroku.

04:30.510 --> 04:35.970
This is going to take about 15 seconds after it actually finishes it'll take about another 15 seconds

04:35.970 --> 04:40.860
to get the service started but once it's up and running we can play around with it inside of post man

04:40.860 --> 04:43.610
making sure everything works as expected.

04:43.620 --> 04:45.860
Right here we are verifying the deploy.

04:45.960 --> 04:49.270
Everything looks like it went well and we're back at the terminal.

04:49.480 --> 04:51.060
Let's go ahead and test things out.

04:51.060 --> 04:52.830
Over inside of postmen.

04:53.040 --> 05:00.210
Now over inside of postman we need to switch from to do app local to do app Heroku But once we do we

05:00.210 --> 05:02.900
can make any of the requests we previously set up.

05:02.910 --> 05:05.240
I'm going to get started by creating a user.

05:05.400 --> 05:09.070
We can make the user with the default data since no users exist.

05:09.120 --> 05:14.660
I can send this off and down below we get a 200 and we can see the user was indeed created.

05:14.670 --> 05:17.260
We also get our X auth headers sitting right here.

05:17.280 --> 05:22.840
I can go ahead and grab this added to my clipboard and we can make some secure requests.

05:22.840 --> 05:27.940
For example getting the user who's currently logged in I'm going to go ahead and provide the header

05:27.940 --> 05:34.600
value as the X auth header send off the request and in the response body what do we get back we get

05:34.600 --> 05:37.540
back the ID and the email as expected.

05:37.540 --> 05:41.440
Now let's go ahead and manage some to do's using the production API.

05:41.440 --> 05:47.200
We're going to set the X off Hetter equal to the value of the token.

05:47.220 --> 05:50.630
I have some body data already set up so I can go ahead and send off this one.

05:50.630 --> 05:52.670
And down below we have our to do item.

05:52.710 --> 05:54.520
I'm going to make a second one as well.

05:56.000 --> 05:57.500
Eat some food.

05:57.500 --> 05:59.630
Not that I need to remind myself to do this.

05:59.690 --> 06:03.950
I can send that off and now we have to do's inside of the database.

06:03.980 --> 06:09.530
I'm going to make a get to do is call next to confirm that I need to do's were indeed added to the database

06:09.960 --> 06:11.220
at the South Hetter.

06:11.300 --> 06:14.500
Send this one off and down below we get our call back.

06:14.600 --> 06:20.690
We have a 200 status code which is great and we have the two to do items we just created.

06:20.690 --> 06:23.590
From here we can go ahead and play around with a few other routes.

06:23.630 --> 06:28.090
I'm going to take this first to do and I'm going to try to update it using patch.

06:28.190 --> 06:34.480
I can go into patch I can update the body setting completed to true and setting the text equal to nothing.

06:34.480 --> 06:41.290
I'm not going to update the text then I can update the ID inside of the you R-AL and I can grab the

06:41.290 --> 06:49.030
X header value from one of the previous requests headers X off I'm going to grab that old value move

06:49.030 --> 06:51.830
into the patch call and add it right here.

06:52.620 --> 06:53.470
There we go.

06:53.490 --> 06:57.840
Now we're updating one of the to do is we just created were properly logged in and all we're doing is

06:57.840 --> 07:00.070
toggling it from false to true.

07:00.210 --> 07:05.120
If I send this off down below we get back the new to do we see that completed is equal to true.

07:05.220 --> 07:10.070
And we now have a completed at time stamp as well which is fantastic.

07:10.140 --> 07:15.330
Last up let's tried to delete the to do item and make sure that works also.

07:15.630 --> 07:17.400
I'm going to go ahead and grab the ID.

07:17.490 --> 07:25.180
Open up the Delete to do call paste the ID right in here then we can go ahead and grab the X off Hetter

07:25.240 --> 07:29.140
from one of the previous requests.

07:29.260 --> 07:34.450
I'm going to paste that into the headers Section X hyphen off putting it right here.

07:34.510 --> 07:39.940
We can send this one and we get a 200 back with our to do that to do that just got removed.

07:40.060 --> 07:45.430
If we now go back to the old get to do is request and rerun it down below we should see we just have

07:45.430 --> 07:47.650
1 to do item in place.

07:47.800 --> 07:49.610
Last up let's log out.

07:49.870 --> 07:52.800
I'm going to grab the south Hetter we've been using all along.

07:52.870 --> 08:01.270
Head to the delete users me token call pass in the proper token value send that off and we get a 200.

08:01.270 --> 08:05.840
Now if we try to make any of the previous calls like get to do's we're going to get a 401.

08:05.880 --> 08:10.680
Unauthorized and that is because we have logged out destroying that token.

08:10.720 --> 08:14.180
Now all of this was also updated inside of robo Mongo.

08:14.260 --> 08:20.060
If I refreshed that connection and open up the collections list you can now see we have the two dues

08:20.060 --> 08:25.010
collection and the users collection and inside of there we have all the appropriate data.

08:25.010 --> 08:30.530
We have our user sitting right here and the password is successfully hashed using the crypt and inside

08:30.530 --> 08:32.190
of the to do's collection.

08:32.270 --> 08:37.250
We have our document with our one to do item now though we have this in place.

08:37.250 --> 08:40.590
We are done with the to do application.

08:40.610 --> 08:46.040
I hope you had a good time setting up this API learning how to create and test end points setting up

08:46.070 --> 08:52.970
mongoose and Mongo D-B managing configuration using POST man and Roboam mango until it was a lot in

08:52.970 --> 08:54.290
the last two sections.

08:54.320 --> 09:00.980
But this is one of the most real world node app examples I've created applications so similar to this

09:00.980 --> 09:02.120
for clients.

09:02.120 --> 09:03.980
Obviously it wasn't meant to do API.

09:03.980 --> 09:05.450
It was to manage something else.

09:05.540 --> 09:07.760
But the techniques are identical.

09:07.790 --> 09:15.470
I used the exact same tool sets when creating those apps including Heroku for deploying my applications.

09:15.470 --> 09:20.660
Now we are done but I am going to run into the terminal and for sanity's sake run get status one more

09:20.660 --> 09:23.960
time just to make sure no files were changed.

09:23.960 --> 09:25.180
We can see none were.

09:25.190 --> 09:26.790
So that is it.

09:26.810 --> 09:30.620
That's it for this section it's also it for the to do API.

09:30.620 --> 09:34.290
Once again thanks for joining me I will see you in the next section.

09:34.310 --> 09:35.260
Stay tuned.
